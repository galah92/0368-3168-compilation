import java_cup.runtime.*;
import AST.*;

parser code 
{:
    public Lexer lexer;

    public Parser(Lexer lexer)
    {
        super(lexer);
        this.lexer = lexer;
    }
    public void report_error(String message, Object info)
    {
        System.out.print("ERROR >> [" + lexer.getLine() + ":"
                          + lexer.getCharPos() + "]");
        System.exit(0);
    }
:}

/* CUSTOMIZE CUP PARSER */
scan with
{:
    Symbol s;
    s = lexer.next_token();
    //System.out.print(s.sym + "["
//				 + lexer.getLine() + ":"
//				 + lexer.getCharPos() + "] ");
    //System.out.print(TokenNames.terminalNames[s.sym]);
    //if (s.value != null) { System.out.print("(" + s.value + ")"); }
    //System.out.println();
    return s; 
:};

/* TERMINALS */
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal NIL;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal COMMA;
terminal DOT;
terminal SEMICOLON;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;
terminal ARRAY;
terminal CLASS;
terminal EXTENDS;
terminal RETURN;
terminal WHILE;
terminal IF;
terminal NEW;
terminal COMMENT;
terminal STRING;

terminal Integer INT;
terminal String ID;

/* NON TERMINALS */
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_ARRAY_DEC arrayDec;
non terminal AST_varDec varDec;
non terminal AST_funcDec funcDec;
non terminal AST_newExp newExp;
non terminal AST_paramsList paramsList;
non terminal AST_cField cField;

/* OPERATOR PRECEDENCE */
precedence left ASSIGN;
precedence left EQ;
precedence left LT;
precedence left GT;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;

/* START WITH: stmtList */
start with stmtList;

/* DERIVATION RULES */

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
                    | stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
                    ;

paramsList  ::=     ID:id paramsList:list               {: RESULT = new AST_paramsList(id, list); :} |
                    ID:id                               {: RESULT = new AST_paramsList(id, null); :} ;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
                    | var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
                    | var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
                    ;
                    
stmt		::=		var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e); :}
                    | IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
                    | WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
                    ;

exp			::=		INT:i								{: RESULT = new AST_EXP_INT(i);          :}
                    | var:v								{: RESULT = new AST_EXP_VAR(v);          :}
                    | exp:e1 PLUS  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 0);:}
                    | exp:e1 MINUS exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 1);:}
                    ;

varDec      ::=     ID:id1 ID:id2                           {: RESULT = new AST_varDec(id1, id2); :} |
                    ID:id1 ID:id2 ASSIGN exp:e              {: RESULT = new AST_varDec(id1, id2, e); :} |
                    ID:id1 ID:id2 ASSIGN newExp:e           {: RESULT = new AST_varDec(id1, id2, e); :} ;
funcDec     ::=     ID:retType ID:funcName LPAREN paramsList:pList RPAREN LBRACE stmtList:sList RBRACE   {: RESULT = new AST_funcDec(retType, funcName, pList, sList); :} ;
arrayDec    ::=     ARRAY ID:id1 EQ ID:id2 LBRACK RBRACK    {: RESULT = new AST_ARRAY_DEC(id2, id2); :};


newExp      ::=     NEW ID:id                           {: RESULT = new AST_newExp(id); :} |
                    NEW ID:id LBRACK exp:e RBRACK       {: RESULT = new AST_newExp(id, e); :} ;

cField      ::=     varDec:vDec                         {: RESULT = new AST_cField(vDec); :} |
                    funcDec:fDec                        {: RESULT = new AST_cField(fDec); :} ;

