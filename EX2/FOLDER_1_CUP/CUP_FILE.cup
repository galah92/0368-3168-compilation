import java_cup.runtime.*;
import AST.*;

parser code
{:
    public Lexer lexer;

    public Parser(Lexer lexer)
    {
        super(lexer);
        this.lexer = lexer;
    }
    public void report_error(String message, Object info)
    {
        System.out.println("ERROR >> [" + lexer.getLine() + ":"
                          + lexer.getCharPos() + "]");
        System.out.format("ERROR message : %s\n", message);
        System.exit(0);
    }
:}

/* CUSTOMIZE CUP PARSER */
scan with
{:
    Symbol s;
    s = lexer.next_token();
    //System.out.print(s.sym + "["
//				 + lexer.getLine() + ":"
//				 + lexer.getCharPos() + "] ");
    //System.out.print(TokenNames.terminalNames[s.sym]);
    //if (s.value != null) { System.out.print("(" + s.value + ")"); }
    //System.out.println();
    return s;
:};

/* TERMINALS */
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal NIL;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal COMMA;
terminal DOT;
terminal SEMICOLON;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;
terminal ARRAY;
terminal CLASS;
terminal EXTENDS;
terminal RETURN;
terminal WHILE;
terminal IF;
terminal NEW;
terminal COMMENT;

terminal String STRING;

terminal Integer INT;
terminal String ID;

/* NON TERMINALS */
non terminal AST_EXP exp;
non terminal AST_expList expList;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_decList decList;
non terminal AST_dec dec;
non terminal AST_ARRAY_DEC arrayDec;
non terminal AST_varDec varDec;
non terminal AST_funcDec funcDec;
non terminal AST_classDec classDec;
non terminal AST_newExp newExp;
non terminal AST_paramsList paramsList;
non terminal AST_cField cField;
non terminal AST_cFieldList cFieldList;

/* OPERATOR PRECEDENCE */
precedence left ASSIGN;
precedence left EQ;
precedence left LT;
precedence left GT;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence left LBRACK;
precedence left LPAREN;
precedence left DOT;

/* START WITH: stmtList */
// TODO: change it to decList when ready (when all the rest is complete
start with stmtList;

/* DERIVATION RULES */

decList     ::=     dec:d decList:list                  {: RESULT = new AST_decList(d, list); :} |
                    dec:d                               {: RESULT = new AST_decList(d, null); :} ;

stmtList	::=		stmt:s stmtList:l                   {: RESULT = new AST_STMT_LIST(s,l); :} |
                    stmt:s                              {: RESULT = new AST_STMT_LIST(s,null); :} ;
// TODO: check if cant be odd number of id's
paramsList  ::=     ID:id1 ID:id2 COMMA paramsList:list {: RESULT = new AST_paramsList(id1, id2, list); :} |
                    ID:id1 ID:id2                       {: RESULT = new AST_paramsList(id1, id2, null); :} ;

cFieldList  ::=     cField:field cFieldList:list        {: RESULT = new AST_cFieldList(field, list); :} |
                    cField:field                        {: RESULT = new AST_cFieldList(field, null); :} ;

expList     ::=     exp:e COMMA expList:list            {: RESULT = new AST_expList(e, list); :} |
                    exp:e                               {: RESULT = new AST_expList(e, null); :} ;


dec         ::=     varDec:dec                                                                          {: RESULT = new AST_dec(dec); :} |
                    funcDec:dec                                                                         {: RESULT = new AST_dec(dec); :} |
                    classDec:dec                                                                        {: RESULT = new AST_dec(dec); :} |
                    arrayDec:dec                                                                        {: RESULT = new AST_dec(dec); :} ;
//TODO : fix varDec printing
varDec      ::=     ID:id1 ID:id2 SEMICOLON                                                             {: RESULT = new AST_varDec(id1, id2); :} |
                    ID:id1 ID:id2 ASSIGN exp:e  SEMICOLON                                               {: RESULT = new AST_varDec(id1, id2, e); :} |
                    ID:id1 ID:id2 ASSIGN newExp:e  SEMICOLON                                            {: RESULT = new AST_varDec(id1, id2, e); :} ;

funcDec     ::=     ID:retType ID:funcName LPAREN paramsList:pList RPAREN LBRACE stmtList:sList RBRACE  {: RESULT = new AST_funcDec(retType, funcName, pList, sList); :} ;

classDec    ::=     CLASS ID:id1 LBRACE cFieldList:list RBRACE                                          {: RESULT = new AST_classDec(id1, list); :} |
                    CLASS ID:id1 LBRACK EXTENDS ID:id2 RBRACK LBRACE cFieldList:list RBRACE             {: RESULT = new AST_classDec(id1, id2, list); :} ;

arrayDec    ::=     ARRAY ID:id1 EQ ID:id2 LBRACK RBRACK                                                {: RESULT = new AST_ARRAY_DEC(id2, id2); :};

exp			::=		INT:i							{: RESULT = new AST_EXP_INT(i); :} |
                    STRING:s						{: RESULT = new AST_EXP_STRING(s); :} |
                    var:v							{: RESULT = new AST_EXP_VAR(v); :} |
                    LPAREN exp:e RPAREN				{: RESULT = new AST_EXP_PAREN(e); :} |
                    ID:id LPAREN expList:eList RPAREN {: RESULT = new AST_EXP_ID(id,eList); :} |
                    var:v DOT ID:id LPAREN expList:eList RPAREN {: RESULT = new AST_EXP_ID(v, id,eList); :} |
                    exp:e1 PLUS  exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 0);:} |
                    exp:e1 MINUS exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 1);:} |
                    exp:e1 TIMES exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 2);:} |
                    exp:e1 DIVIDE exp:e2		    {: RESULT = new AST_EXP_BINOP(e1, e2, 3);:} |
                    exp:e1 LT exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 4);:} |
                    exp:e1 GT exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 5);:} |
                    exp:e1 EQ exp:e2				{: RESULT = new AST_EXP_BINOP(e1, e2, 6);:} ;
// TODO: a lot to complete regarding exp rules

var			::=		ID:name								                        {: RESULT = new AST_VAR_SIMPLE(name);       :} |
                    var:v DOT ID:fieldName			                            {: RESULT = new AST_VAR_FIELD(v,fieldName); :} |
                    var:v LBRACK exp:e RBRACK			                        {: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} ;

stmt		::=		varDec:v                                                    {: RESULT = new AST_STMT_VarDec(v);         :} |
                    funcDec:fDec                                                {: RESULT = new AST_STMT_funcDec(fDec);         :} |
                    var:v ASSIGN exp:e    SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v, e);      :} |
                    var:v ASSIGN newExp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v, e);      :} |
                    RETURN exp:e SEMICOLON                                      {: RESULT = new AST_STMT_RETURN(e);         :} |
                    IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(cond, body);    :} |
                    WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond, body); :} |
                    ID:id LPAREN expList:eList RPAREN SEMICOLON	                {: RESULT = new AST_STMT_ID(id, eList);     :} |
                    var:v DOT ID:id LPAREN expList:eList RPAREN SEMICOLON   	{: RESULT = new AST_STMT_ID(v, id, eList);  :} ;

newExp      ::=     NEW ID:id                           {: RESULT = new AST_newExp(id); :} |
                    NEW ID:id LBRACK exp:e RBRACK       {: RESULT = new AST_newExp(id, e); :} ;

cField      ::=     varDec:vDec                         {: RESULT = new AST_cField(vDec); :} |
                    funcDec:fDec                        {: RESULT = new AST_cField(fDec); :} ;

// TODO: what about BINOP and INT in the documentation?
